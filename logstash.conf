input {
  syslog {
    port => 8515
    codec => plain {
      charset => "ISO-8859-1"
    }
  }
}
filter {
 grok {
   match => {
     "message" => [
        ",attack_type=\"%{DATA:attack_type}\"",
        ",blocking_exception_reason=\"%{DATA:blocking_exception_reason}\"",
        ",date_time=\"%{DATA:date_time}\"",
        ",serverIp=\"%{DATA:dest_ip}\"",
        ",dest_port=\"%{DATA:dest_port}\"",
        ",clientIp=\"%{DATA:ip_client}\"",
        ",is_truncated=\"%{DATA:is_truncated}\"",
        ",method=\"%{DATA:method}\"",
        ",policy_name=\"%{DATA:policy_name}\"",
        ",protocol=\"%{DATA:protocol}\"",
        ",requestStatus=\"%{DATA:request_status}\"",
        ",request=\"%{DATA:request}\"",
        ",request_body_base64=\"%{DATA:request_body_base64}\"",
        ",response_code=\"%{DATA:response_code}\"",
        ",severity=\"%{DATA:severity}\"",
        ",sig_cves=\"%{DATA:sig_cves}\"",
        ",sig_ids=\"%{DATA:sig_ids}\"",
        ",sig_names=\"%{DATA:sig_names}\"",
        ",sig_set_names=\"%{DATA:sig_set_names}\"",
        ",src_port=\"%{DATA:src_port}\"",
        ",staged_sig_cves=\"%{DATA:staged_sig_cves}\"",
        ",staged_sig_ids=\"%{DATA:staged_sig_ids}\"",
        ",staged_sig_names=\"%{DATA:staged_sig_names}\"",
        ",staged_threat_campaign_names=\"%{DATA:staged_threat_campaign_names}\"",
        ",sub_violations=\"%{DATA:sub_violations}\"",
        ",support_id=\"%{DATA:support_id}\"",
        ",threat_campaign_names=\"%{DATA:threat_campaign_names}\"",
        ",unit_hostname=\"%{DATA:unit_hostname}\"",
        ",uri=\"%{DATA:uri}\"",
        ",violations=\"%{DATA:violations}\"",
        ",violation_details=\"%{DATA:violation_details_xml}\"",
        ",violation_rating=\"%{DATA:violation_rating}\"",
        ",virtualServerName=\"%{DATA:vs_name}\"",
        ",x_forwarded_for_header_value=\"%{DATA:x_forwarded_for_header_value}\""
     ]
   }
   break_on_match => false
 }

  if [violation_details_xml] != "N/A" {
    # change from XML to JSON Obj
    xml {
      source => "violation_details_xml"
      target => "violation_details"
      remove_namespaces => true
			force_array => false
    }
  }

  if [x_forwarded_for_header_value] != "N/A" {
    mutate { add_field => { "source_host" => "%{x_forwarded_for_header_value}"}}
  } 
  else {
    mutate { add_field => { "source_host" => "%{ip_client}"}}
  }

  cidr {
    address => [ "%{source_host}" ]
    add_tag => [ "internalIP" ]
    network => [ "10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16" ]
  }
  if "internalIP" not in [tags] {
    geoip {
      source => "source_host"
      ecs_compatibility => disabled
    }
  } 

  mutate {
    gsub => ["sig_names","%22","'"]
    split => { "attack_type" => "," }
    split => { "sig_cves" => "," }
    split => { "sig_ids" => "," }
    split => { "sig_names" => "," }
    split => { "sig_set_names" => "," }
    split => { "staged_sig_cves" => "," }
    split => { "staged_sig_ids" => "," }
    split => { "staged_sig_names" => "," }
    split => { "staged_threat_campaign_names" => "," }
    split => { "sub_violations" => "," }
    split => { "threat_campaign_names" => "," }
    split => { "violations" => "," }
    remove_field => [
      "[violation_details][violation_masks]",
      "violation_details_xml",
      "message", "priority","facility","facility_label", "log", "[event][original]",
      "[geoip][postal_code]","[geoip][region_code]","[geoip][timezone]",
      "[geoip][city_name]","[geoip][continent_code]","[geoip][country_code3]"
    ]
  }
  
  if [violation_details][request-violations] {
    clone {  
        clones => ["decoded"]
        add_field => { "decoded" => "yes" }
    }
  }

 
  ruby {
    code => "
            require 'base64';
            type = event.get('[decoded]');
            data = event.get('[violation_details][request-violations]');
            if data
              violation = data['violation']
              if type
                violation_array = []
                h = Hash.new
                if violation.is_a?(Hash);
                  violation =[violation];
                end
                globalContex = violation[0]['context'] || 'N/A'
                x=0 
                while x < violation.length
                  violation[x]['context'] = violation[x]['context'] || globalContex
                  violation[x]['context'] = violation[x]['context'].downcase
                  case violation[x]['viol_name']
                    
                  when 'VIOL_ATTACK_SIGNATURE'
                    h.clear()

                    if violation[x]['context']=='parameter'
                        violation[x]['parameter_data']['value']=(Base64.decode64(violation[x]['parameter_data']['value']))
                        violation[x]['parameter_data']['name']=(Base64.decode64(violation[x]['parameter_data']['name']))
                    end

                    if violation[x]['context']=='header'
                        violation[x]['header']['header_value']=(Base64.decode64(violation[x]['header']['header_value']))
                        violation[x]['header']['header_name']=(Base64.decode64(violation[x]['header']['header_name']))
                    end
                    
                    if violation[x]['context']=='cookie'
                        violation[x]['cookie']['cookie_value']=(Base64.decode64(violation[x]['cookie']['cookie_value']))
                        violation[x]['cookie']['cookie_name']=(Base64.decode64(violation[x]['cookie']['cookie_name']))
                    end

                    if violation[x]['sig_data'].is_a?(Hash);
                      violation[x]['sig_data'] =[violation[x]['sig_data']];
                    end
                    y=0
                    while y < violation[x]['sig_data'].length
                      ####### Loop through all the keys and store them on a new hash.
                      violation[x].each do |pair|
                        if pair[0] == 'sig_data'
                           ### Sometimes the kw_data doesnt exists because the parameter has sensitive data
                           if violation[x]['sig_data'][y].has_key?('kw_data')
                              ### Sometimes the kw_data is NOT an array.
                              if violation[x]['sig_data'][y]['kw_data'].is_a?(Hash);
                                 violation[x]['sig_data'][y]['kw_data'] = [violation[x]['sig_data'][y]['kw_data']]
                              end
                              z = 0
                              while z < violation[x]['sig_data'][y]['kw_data'].length
                                 violation[x]['sig_data'][y]['kw_data'][z]['buffer_decoded']=(Base64.decode64(violation[x]['sig_data'][y]['kw_data'][z]['buffer']))
                                 z = z + 1
                              end
                           end   
                                   
                          h.store(pair[0], pair[1][y])
                        else
                          h.store(pair[0], pair[1])
                        end
                      end
                      data = Marshal.dump(h)
                      violation_array.push(Marshal.restore(data))
                      y = y + 1
                    end
                  when 'VIOL_HTTP_PROTOCOL'
                    h.clear()
                    if violation[x].has_key?('http_sub_violation')
                      violation[x]['http_sub_violation']=(Base64.decode64(violation[x]['http_sub_violation']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))
                  when 'VIOL_COOKIE_LENGTH'
                    #####  The violation should contain <cookie> parameter that is base64 encoded. We wil create an additional parameter <cookie_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('cookie')
                      violation[x]['cookie_decoded']=(Base64.decode64(violation[x]['cookie']))
                      violation[x]['cookie_name']=violation[x]['cookie']
                      violation[x].delete('cookie')
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_HEADER_LENGTH'
                    #####  The violation should contain <header> parameter that is base64 encoded. We wil create an additional parameter <header_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('header')
                      violation[x]['header_decoded']=(Base64.decode64(violation[x]['header']))
                      violation[x]['header_name']=violation[x]['header']
                      violation[x].delete('header')                      
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_COOKIE_MALFORMED'
                    #####  The violation should contain <buffer> parameter that is base64 encoded. We wil create an additional parameter <buffer_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('buffer')
                      violation[x]['buffer_decoded']=(Base64.decode64(violation[x]['buffer']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_REQUEST_LENGTH'
                    #####  The violation should contain <extension> parameter that is base64 encoded. We wil create an additional parameter <extension_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('extension')
                      violation[x]['extension_decoded']=(Base64.decode64(violation[x]['extension']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_QUERY_STRING_LENGTH'
                    #####  The violation should contain <extension> parameter that is base64 encoded. We wil create an additional parameter <extension_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('extension')
                      violation[x]['extension_decoded']=(Base64.decode64(violation[x]['extension']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_URL_LENGTH'
                    #####  The violation should contain <extension> parameter that is base64 encoded. We wil create an additional parameter <extension_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('extension')
                      violation[x]['extension_decoded']=(Base64.decode64(violation[x]['extension']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_POST_DATA_LENGTH'
                    #####  The violation should contain <extension> parameter that is base64 encoded. We wil create an additional parameter <extension_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('extension')
                      violation[x]['extension_decoded']=(Base64.decode64(violation[x]['extension']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))
                  when 'VIOL_FILETYPE'
                    #####  The violation should contain <extension> parameter that is base64 encoded. We wil create an additional parameter <extension_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('extension')
                      violation[x]['extension_decoded']=(Base64.decode64(violation[x]['extension']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))
                  when 'VIOL_URL_METACHAR'
                    #####  The violation should contain <uri> parameter that is base64 encoded. We wil create an additional parameter <uri_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('uri')
                      violation[x]['uri_decoded']=(Base64.decode64(violation[x]['uri']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))
                  when 'VIOL_PARAMETER_VALUE_METACHAR'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_NAME_METACHAR'
                    #####  The violation should contain <param_name> parameter that is base64 encoded. We wil create an additional parameter <param_name_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('param_name')
                      violation[x]['param_name_decoded']=(Base64.decode64(violation[x]['param_name']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_DATA_TYPE'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_LOCATION'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_EMPTY_VALUE'
                    #####  The violation should contain <name> parameter that is base64 encoded. We wil create an additional parameter <name_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_REPEATED'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_STATIC_VALUE'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_MANDATORY_PARAMETER'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                  
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_VALUE_LENGTH'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))

                  when 'VIOL_PARAMETER_NUMERIC_VALUE'
                    #####  The violation should contain <name/value> parameter that is base64 encoded. We wil create an additional parameter <name_decoded/value_decoded> which is going to contain the unencoded values.
                    h.clear()
                    if violation[x].has_key?('parameter_data')
                      violation[x]['parameter_data']['name_decoded']=(Base64.decode64(violation[x]['parameter_data']['name']))
                      violation[x]['parameter_data']['value_decoded']=(Base64.decode64(violation[x]['parameter_data']['value']))        
                    end
                    
                    violation[x].each do |pair|
                      h.store(pair[0], pair[1])
                    end

                    data = Marshal.dump(h)
                    violation_array.push(Marshal.restore(data))
                  
                  end
                 
                  x = x + 1
                end
                event.set('details', violation_array);
              else
                if violation.is_a?(Hash);
                  violation =[violation];
                end
                x=0 
                needEvent = false
                while x < violation.length
                  case violation[x]['viol_name']
                    
                  when 'VIOL_COOKIE_LENGTH'
                    violation[x]['cookie_name']=violation[x]['cookie']
                    violation[x].delete('cookie')
                    needEvent = true

                  when 'VIOL_HEADER_LENGTH'
                    violation[x]['header_name']=violation[x]['header']
                    violation[x].delete('header')
                    needEvent = true
                  
                  when 'VIOL_HEADER_METACHAR'
                    violation[x]['header_buffer']=violation[x]['header']
                    violation[x].delete('header')
                    needEvent = true
                  end
                  x = x + 1
                end
                if needEvent
                  event.set('[violation_details][request-violations]', data);
                end
              end
            end
    "
  }
  
  if "decoded" in [tags] 
  {
    if [details][0] { 
      split {
        field => ["[details]"]
      }
    }
    mutate {
      copy => { "[details][sig_data][sig_id]" => "[sig_id]" }
      remove_field => [
        "violation_details", "sig_set_names","sig_names", "sig_ids", "violations","request","geoip", "decoded"
      ]
    }
  }

}
output {
  if "decoded" in [tags] 
  {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "waf-decoded-logs-%{+YYY.MM.dd}"
    }
  }
  else{
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "waf-logs-%{+YYY.MM.dd}"
    }
  }
}
